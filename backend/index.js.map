{"mappings":";;;;;;;;;;;AECA;AAEA,wBAAwB;AACxB,MAAM;AAEN,6BAA6B;AAC7B,MAAM;AAEN,6BAA6B;AAC7B,gBAAS,QAAQ,6BAAO;IACpB,QAAQ;AACR,GACC,KAAK;IACJ,QAAQ,IAAI;AACd,GACC,MAAM,CAAC;IACN,QAAQ,IAAI,0BAA0B;AACxC;AAEJ,4BAAiB;;;ADlBjB,wBAAwB;AACxB,MAAM;AAEN,yBAAyB;AACzB,MAAM,oCAAc,IAAI,iCAAgB;IACpC,sBAAsB;IACtB,UAAU;QACN,MAAM;IACV;IACA,OAAO;QACH,MAAM;QACN,UAAU;IACd;IACA,KAAK;QACD,MAAM;QACN,UAAU;IACd;AAEJ;AAEA,2BAA2B;AAC3B,IAAI,mCAAa,gCAAe,sCAAgB,SAAO,mCAAa;AAEpE,eAAe;AACf,4BAAiB;;;ADtBjB,cAAc;AACd,MAAM,6BAAO;AAEb,qBAAqB;AACrB,MAAM,4BAAM;AAEZ,qCAAqC;AACrC,0BAAI,IAAI;AAER,gCAAgC;AAChC,0BAAI,IAAI,eAAQ;AAEhB,8BAA8B;AAC9B,0BAAI,OAAO,4BAAM;IACb,QAAQ,IAAI,kBAAkB,6BAAO;AACvC;AAEF,gBAAgB;AAChB,uBAAuB;AACvB,0BAAI,MAAM,UAAU,IAAI,OAAO,KAAK;IAChC,IAAI,QAAQ,EAAE;IACd,IAAG;QACD,QAAQ,MAAM,0BAAW,KAAK,CAAC;QAC/B,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACJ;AACA,qBAAqB;AAErB,6BAA6B;AAC7B,0BAAI,MAAM,cAAc,IAAI,OAAO,KAAK;IACpC,MAAM,KAAK,IAAI,OAAO;IAEtB,IAAG;QACD,MAAM,SAAS,MAAM,0BAAW,SAAS;QAEzC,IAAI,CAAC,QAAQ;YACX,IAAI,OAAO,KAAK,KAAK;gBAAE,OAAO;YAA2B;YACzD;QACF;QACA,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACJ;AAEA,qBAAqB;AACrB,0BAAI,MAAM,UAAU,KAAK,OAAO,KAAK;IACjC,MAAM,MAAM,IAAI,0BAAW,IAAI;IAE/B,IAAI;QACF,MAAM,IAAI;QAEV,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF;AAEF,eAAe;AACf,0BAAI,MAAM,cAAc,IAAI,OAAO,KAAK;IACpC,MAAM,KAAK,IAAI,OAAO;IACtB,MAAM,UAAU,IAAI;IAEpB,IAAI;QACF,MAAM,SAAS,MAAM,0BAAW,kBAAkB,IAAI;QAEtD,IAAI,OAAO,gBAAgB,GAAG;YAC5B,IAAI,OAAO,KAAK,KAAK;gBAAE,OAAO;YAAiC;YAC/D;QACF;QACA,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF;AAEF,eAAe;AACf,0BAAI,MAAM,cAAc,OAAO,OAAO,KAAK;IACvC,MAAM,KAAK,IAAI,OAAO;IAEtB,IAAI;QACJ,uBAAuB;QACrB,MAAM,SAAS,MAAM,0BAAW,kBAAkB;QACpD,qBAAqB;QAEnB,IAAI,CAAC,QACH,IAAI,OAAO,KAAK,KAAK;YAAE,OAAO;QAAkB;QAElD,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF","sources":["src/server.js","src/dbMusicSchema.js","src/dbConnection.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst musicModel = require(\"./dbMusicSchema.js\");\n\n// Define port\nconst port = 3600;\n\n// Create Express app\nconst app = express();\n\n// Add CORS to all routes and methods\napp.use(cors());\n\n// Enable parsing of JSON bodies\napp.use(express.json());\n\n// Start listening to the port\napp.listen(port, () => {\n    console.log(\"Listening on \" + port + \".\");\n  }); \n\n// Get all music\n// Task 2.2 Starts here\napp.route(\"/music\").get(async (req, res) => {\n    let music = [];\n    try{\n      music = await musicModel.find({});\n      res.status(201).json(music);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n});\n// Task 2.2 Ends here\n\n// Get a specific music title\napp.route(\"/music/:id\").get(async (req, res) => {\n    const id = req.params.id;\n\n    try{\n      const result = await musicModel.findById(id);\n\n      if (!result) {\n        res.status(404).json({ error: \"Searched music not found\" });\n        return;\n      }\n      res.status(201).json(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n});\n\n// Create a new music\napp.route(\"/music\").post(async (req, res) => {\n    const doc = new musicModel(req.body);\n\n    try {\n      await doc.save();\n      \n      res.status(201).json(doc);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n\n// Update music\napp.route(\"/music/:id\").put(async (req, res) => {\n    const id = req.params.id;\n    const docBody = req.body;\n\n    try {\n      const result = await musicModel.findByIdAndUpdate(id, docBody);\n\n      if (result.matchedCount == 0) {\n        res.status(404).json({ error: \"Could not find music to update\" });\n        return;\n      }\n      res.status(201).json(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n\n// Delete music\napp.route(\"/music/:id\").delete(async (req, res) => {\n    const id = req.params.id;\n\n    try {\n    // Task 2.1 Starts here\n      const result = await musicModel.findByIdAndDelete(id);\n    // Task 2.1 Ends here\n\n      if (!result) {\n        res.status(404).json({ error: \"Music not found\" });\n      }\n      res.status(201).send(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n","const mongoose = require(\"./dbConnection.js\");\n\n// Initialize parameters\nconst collectionName = process.env.DB_COLLECTION;\n\n// Create mongoose schema\nconst musicSchema = new mongoose.Schema({\n    //Task 1.2 Starts here\n    category: {\n        type: String\n    },\n    title: {\n        type: String,\n        required: true\n    },\n    url: {\n        type: String,\n        required: true\n    }\n    // Task 1.2 Ends here\n})\n\n// Create model from schema\nlet musicModel = mongoose.model(collectionName, schema=musicSchema, collectionName);\n\n// Export model\nmodule.exports = musicModel;","const mongoose = require(\"mongoose\");\nrequire('dotenv').config();\n\n// Initialize parameters\nconst dbName = process.env.DB_NAME;\n\n// database connection string\nconst dbUrl = process.env.MONGODB_URL;\n\n// create database connection\nmongoose.connect(dbUrl, {\n    dbName: dbName\n    })\n    .then(() => {\n      console.log(\"Connected to DB\");\n    })\n    .catch((err) => {\n      console.log(\"Error connecting to DB\", err);\n    })\n\nmodule.exports = mongoose;"],"names":[],"version":3,"file":"index.js.map"}